
class Solution {
public:
    int res = INT_MAX;
   TreeNode *prev = NULL;
   
 void helper(TreeNode *root){
       if(root->left)
            helper(root->left);
        if(prev) res = min(res,abs(prev->val - root->val));
        prev = root;
        if(root->right)
            helper(root->right);
 }   
    
    int getMinimumDifference(TreeNode* root) {
    
        helper(root);
        
        return res;
        
    }
};







// EFFICIENT SOLUTION
class Solution {
public:
    
    void helper(TreeNode *root,vector<int>&v){
        if(root!=NULL){
        helper(root->left,v);
        v.push_back(root->val);
        helper(root->right,v);
        }
    }
    
         int getMinimumDifference(TreeNode* root) {
             
    vector<int>v;
             
             helper(root,v);
    int res = INT_MAX;
             for(int i=0;i<v.size()-1;i++){
                res = min(res,abs(v[i]-v[i+1]));
        }     
             return res;
         }
    
};

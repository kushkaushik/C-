/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    static bool make(pair<int,int>&a,pair<int,int>&b){
    if(a.first == b.first)
        return a.second>b.second;
    return a.first<b.first;
    }
    
    int maxLevelSum(TreeNode* root) {
        vector<pair<int,int>>vp;
        queue<TreeNode*>qu;
        qu.push(root);
        int max1 = 0;int c = 0;
        while(qu.empty() == false){
            int m = qu.size();
            c++;
            int sum = 0;
            for(int i =0;i<m;i++){
                TreeNode *temp = qu.front();
                qu.pop();
                sum+=temp->val;
                if(temp->left)
                    qu.push(temp->left);
                if(temp->right)
                    qu.push(temp->right);
            }
            // max1 = max(max1,sum);
            vp.push_back({sum,c});
        }
        sort(vp.begin(),vp.end(),make);
        for(auto x:vp)
            cout<<x.first<<" "<<x.second<<endl;
        return vp[vp.size()-1].second;
        
    }
};
